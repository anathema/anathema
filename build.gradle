import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import org.ajoberstar.gradle.git.tasks.GitTag;
import org.ajoberstar.gradle.git.tasks.GitPush;

ext.dependenciesDir = new File(buildDir, 'dependencies')
ext.versionString = "${version_major}.${version_minor}.${version_revision}"
ext.testDependencies = ['junit:junit:4.+', 'org.mockito:mockito-core:1.9.0']

apply from: "publishUpdate.gradle"
apply from: "publishFullRelease.gradle"

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath 'org.ajoberstar:gradle-git:0.2.0'
  }
}

repositories {
  mavenCentral()
}
configurations {
  launch4j
  nsis
  scp
}
dependencies {
  launch4j files(
    "./Development_Distribution/Windows/Binaries/launch4j/launch4j.jar",
    "./Development_Distribution/Windows/Binaries/launch4j/xstream.jar",
  )
  nsis files("./Development_Distribution/Windows/Binaries/NSIS/nsisant-1.3.jar")
  scp 'org.apache.ant:ant-jsch:1.8.4', 'com.jcraft:jsch:0.1.48'
}

apply plugin: 'idea'

idea { project { languageLevel = '1.6' } }

task wrapper(type: Wrapper) {
  gradleVersion = '1.0'
}

def os = operatingSystem()
String operatingSystem() {
  def os = System.getProperty('os.name').toLowerCase()
  def result = ""
  if( os.indexOf("win"  ) >= 0 ) result = "win"
  if( os.indexOf("mac"  ) >= 0 ) result = "mac"
  if( os.indexOf("nix"  ) >= 0         //  unix
  ||  os.indexOf("nux"  ) >= 0 ) result = "linux"
  if( os.indexOf("sunos") >= 0 ) result = "solaris"
  return result
}

subprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.6

  apply plugin: 'idea'
  apply plugin: 'eclipse'
  
  repositories {
    mavenCentral()
    maven {
      url 'https://github.com/anathema/anathema-thirdparty/raw/master/releases/'
    }
  }

  sourceSets.main.java.srcDir 'src'
  sourceSets.test.java.srcDir 'test'
  sourceSets.main.resources.srcDir 'resources'

  task collectTransitiveDependencies() << {
    copy {
      from configurations.compile.findAll { File dependency -> (dependency.absolutePath.contains('cache')) }
      into parent.ext.dependenciesDir
    }
  }

  task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
  }
}

task clean << {
  ant.delete(includeEmptyDirs:"true", quiet:"true") {
    fileset(dir:buildDir, includes:"**" )
  }
}

def projectLibrary(String project) {
  return zipTree("$project/build/libs/${project}.jar")
}

task createModule << {
  if (!project.hasProperty('moduleName')) {
    throw new StopExecutionException( "\nPlease specify your new module name like so: gradlew createModule -PmoduleName=MyNewModuleNameHere\n")
  }
  else {
    if (new File(moduleName).exists()) {
      throw new StopExecutionException("Module $moduleName already exists.")
    }
    else {
      mkdir moduleName
      mkdir "$moduleName/src"
      mkdir "$moduleName/resources"
      mkdir "$moduleName/test"
      new File("$moduleName/build.gradle").withWriter { out ->
        out.println "dependencies {\n//  Insert your dependencies here like so:\n//  compile project(':Character_Equipment')\n//  compile project(':Character_Equipment_Impl')\n}"
      }
    }
  }
}

// Release Variables
ext.projectName    = "Anathema"
ext.releaseZipName = "${projectName}_Zip_v${versionString}.zip"
ext.releaseWinName = "${projectName}_Win_v${versionString}.exe"
ext.releaseMacName = "${projectName}_Mac_v${versionString}.zip"
ext.macAppDir      = "${projectName}.app"
ext.releaseDirName = "${projectName} ${versionString}"
if( "${version_revision}" == '0') releaseDirName += " ${version_name}"
ext.releaseDir     = new File( "${buildDir}/${releaseDirName}" )

// All Releases
task release << {
  // grab the latest updates for this release from versions.md and put into readme.md for sourceforge
  String delim  = "## Release ${versionString}"
  String delim2 = "## Release "
  String releaseNotes = new File("Development_Documentation/Distribution/English/versions.md").getText( 'UTF-8' )
  try {
    new File("${releaseDir}/readme.md").write( delim + releaseNotes.split( delim )[1].split(delim2)[0], 'UTF-8' )
  } catch( java.lang.ArrayIndexOutOfBoundsException e ){
    out.println( "Unable to generate readme.md, the version number in gradle.properties is not found in versions.md" )
  }
}

release.group = 'Release'
release.description = 'Builds all artifacts required to release a new version.'

task tag
  
task tagVersion(type: GitTag) {
  message = "Version ${versionString}"
  tagName = "v${versionString}"
  force   = true
}

// If you use ssh for git, your github ssh key-auth passphrase will be prompted for.
// If you use https for git, your github username and password will be prompted for, or can be entered at the command line like so:
// gradlew tag -Pgithub.credentials.username=MyUsernameHere -Pgithub.credentials.password=MyPasswordHere
task tagPush(type: GitPush) {
  pushTags = true
}

tag.group = 'Release'
tag.description = 'Tags the release and pushes the tag to github. [Requires contributor status]'

task version << {
  out.println( "\nPlease update the version number and name.  Enter nothing to default to the old value.")
  def vNumber = usePropertyOrPrompt("versionNumber", "\n\nVersion Number | old: ${versionString} new: ")
  def vName   = usePropertyOrPrompt("versionName",  "\nVersion Name | old: ${version_name} new: ")
  ext.versionString    = vNumber == "" ? versionString : vNumber
  ext.version_name     = vName == "" ? version_name : vName
  try {
    ext.version_major    = versionString.split( "\\." )[0]
    ext.version_minor    = versionString.split( "\\." )[1]
    ext.version_revision = versionString.split( "\\." )[2]
  } catch( java.lang.ArrayIndexOutOfBoundsException e ){
    throw new StopExecutionException("Error setting new version number, please use the format major.minor.revision (4.1.2)." )
  }
  def p = new Properties()
  def f = new File("gradle.properties")
  new File("gradle.properties").withReader {
    p.load(it)
    p.setProperty( "version_major", version_major )
    p.setProperty( "version_minor", version_minor )
    p.setProperty( "version_revision", version_revision )
    p.setProperty( "version_name", version_name )
  }
  f.withWriter {
    p.store(it, "Please update this file using this command: gradlew version")
  }
  out.println( "\nVersion number and name have been updated.")
  out.println(   "A new build must be run in order to use the new values.")
}

task createReleaseDirectory << {
  releaseDir.mkdirs()
}
  
// Zip Release
task buildZip(type: Zip) {
  archiveName = releaseZipName
  destinationDir = releaseDir
  from 'Anathema/build/libs'
  into('lib') {
    from('build/dependencies')
    from('build/plugins')
  }
  from("Development_Distribution/Linux") {
    include 'anathema.sh'
    filter( FixCrLfFilter.class,
            eol:FixCrLfFilter.CrLf.newInstance("lf") )
    fileMode = 0755
  }
  from("build/launcher") {
    include 'anathema.exe'
  }
  from("Development_Documentation/Distribution/English") {
    include 'license.txt'
    include 'versions.md'
    rename  'versions.md', 'release_notes.txt'
  }
}

task releaseZip

// Windows Release
task buildWin << {
  def launch4jPath = "Development_Distribution/Windows/Binaries/launch4j/bin_" + os

  mkdir("./build/launcher")
  def exeVersion = "${versionString}.0"
  def versionText = "${versionString} \"$version_name\""
  ant.taskdef(
                 name: 'launch4j',
            classname: 'net.sf.launch4j.ant.Launch4jTask',
            classpath: configurations.launch4j.asPath
  )
  ant.launch4j(
               bindir: launch4jPath,
           configFile: 'Development_Distribution/Windows/launch4j.xml',
              outfile: './build/launcher/anathema.exe',
          fileVersion: "$exeVersion",
       productVersion: "$exeVersion",
       txtFileVersion: "$versionText",
    txtProductVersion: "$versionText"
  )
}

task releaseWin << {
  def nsisPath = "Development_Distribution/Windows/Binaries/NSIS/bin_" + os

  ant.taskdef(name: "nsis",
              classname: "com.danielreese.nsisant.Task",
              classpath: configurations.nsis.asPath)
  ant.nsis(script: "Development_Distribution/Windows/NSIS/anathema.nsi", path: nsisPath) {
    define(name: "RELEASE_DIR",     value: "${releaseDir}")
    define(name: "RELEASE_FILE",    value: "${releaseWinName}")
    define(name: "RELEASE_VERSION", value: "${versionString}")
    define(name: "VERSION",         value: "${versionString}.0")
  }
}

// Mac Release
task buildMac(type: Copy) {
  destinationDir buildDir
  into("${macAppDir}/Contents/") {
    from("Development_Distribution/Mac/")
    include 'Info.plist'
    filter(ReplaceTokens, tokens: ["version-major":    version_major,
                                   "version-minor":    version_minor,
                                   "version-revision": version_revision])
    include 'PkgInfo'
  }
  into("${macAppDir}/Contents/MacOS/") {
    from("Development_Distribution/Mac")
    include 'JavaApplicationStub'
    fileMode = 0755
  }
  into("${macAppDir}/Contents/Resources") {
    from("Development_Distribution/Mac/")
    include 'sungear.icns'
  }
  into("${macAppDir}/Contents/Resources/Java") {
    from("Anathema/build/libs/")
    from("Anathema/resources/icons/core/AnathemaSplashNew.png")
  }
  into("${macAppDir}/Contents/Resources/Java/lib") {
    from("${buildDir}/dependencies/");
    from("${buildDir}/plugins/");
  }
}

task releaseMac(type: Zip) {
  archiveName = releaseMacName
  destinationDir = releaseDir
  into("${projectName}/${macAppDir}") {
    from("${buildDir}/${macAppDir}")
    exclude "${projectName}/${macAppDir}/Contents/MacOS/JavaApplicationStub" // Skipping this because...
  }
  into("${projectName}/${macAppDir}/Contents/MacOS/") { // We include it here with the execute bit set.
    from("Development_Distribution/Mac")                // Necessary when building on a windows system
    include 'JavaApplicationStub'
    fileMode = 0755
  }
  into( "${projectName}") {
    from("Development_Documentation/Distribution/English")
    include 'license.txt'
    include 'versions.md'
    rename  'versions.md', 'release_notes.txt'
    include 'mountain_lion_instructions.webloc'
  }
}

// Release Dependencies
[buildWin, buildMac, buildZip].each {
  it.dependsOn createReleaseDirectory
  it.dependsOn ':Anathema:jar'
}

releaseZip.dependsOn buildZip
releaseWin.dependsOn buildWin
releaseMac.dependsOn buildMac
buildZip.dependsOn buildWin  // Builds the exe launcher which gets included in the zip distribution

release.dependsOn releaseZip, releaseWin, releaseMac

tagPush.dependsOn tagVersion
tag.dependsOn tagVersion, tagPush

// Plugins
apply from: 'plugins.gradle'

tasks.each {
  def isPluginTask = it.name.matches('build.*Plugin')
  if (isPluginTask) {
    buildZip.dependsOn it
    buildWin.dependsOn it
    buildMac.dependsOn it
  }
}

//SSH Support
def usePropertyOrPrompt(property, prompt) {
  if (project.hasProperty(property)) {
    return project.property(property);
  }
  def propertyValue = System.console().readLine("\n${prompt}: ")
  ext[property] = propertyValue
  return propertyValue
}

def usePropertyOrPromptForPassphrase(property, prompt) {
  if (project.hasProperty(property)) {
    return project.property(property);
  }
  def password = System.console().readPassword("\n${prompt}: ")
  ext[property] = password
  return password
}

def findKeyFile() {
  def keyfile = "${System.properties['user.home']}/.ssh/id_rsa"
  while (!new File(keyfile).exists()) {
    keyfile = System.console().readLine("\nCould not find the ssh private keyfile: ${keyfile}\nEnter your keyfile pathname: ")
    keyfile = keyfile.replace("~", System.properties['user.home'])
  }
  return keyfile
}

void runSshExecOnBuildServer(command){
  def host     = "butatopanto.de"
  def user     = "anathema"
  def keyfile  = findKeyFile()
  def passphrase = usePropertyOrPrompt('anathemaPassphrase', "Anathema SSH Key Passphrase")
  sshExec(host, user, keyfile, passphrase, command)
}

void sshExec(String host, String user, keyfile, passphrase, command) {
  ant.taskdef(
          name: "sshexec",
          classname: "org.apache.tools.ant.taskdefs.optional.ssh.SSHExec",
          classpath: configurations.scp.asPath
  )
  ant.sshexec(
          host: host,
          username: user,
          keyfile: keyfile,
          passphrase: "${passphrase}",
          trust: "true",
          command: command
  )
}

def scp(connectString, keyfile, passphrase, Closure fileset) {
  out.println("\nPlease be patient, it takes a few minutes to upload the releases")
  out.println("Unfortunately, feedback during the upload is unavailable (unless you use the -i option)")

  ant.taskdef(
          name: "scp2",
          classname: "org.apache.tools.ant.taskdefs.optional.ssh.Scp",
          classpath: configurations.scp.asPath
  )
  ant.scp2(
          todir: connectString,
          keyfile: keyfile,
          passphrase: "${passphrase}",
          trust: "true",
          verbose: "true", // only visible at the info logging level
          sftp: "true"
  ) {
    fileset()
  }
}